{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","toString","trim","content","firstChild","after","node","newNode","parentNode","insertBefore","nextSibling","before","append","appendChild","wrap","newParent","remove","deleteNode","removeChild","empty","childNodes","arr","n","push","attr","key","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","String","html","style","Object","class","add","className","classList","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","parent","children","siblings","Array","from","filter","next","x","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.6e3e85f9.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    /* 增加节点 */\r\n    create(string) {\r\n        // 创建任意新节点\r\n        const container = document.createElement('template');\r\n        container.innerHTML = string.toString().trim();\r\n        return container.content.firstChild;\r\n    },\r\n\r\n    after(node, newNode) {\r\n        // 在node节点之后添加节点\r\n        // 相当于在node下一个节点之前插入newNode节点\r\n        // console.log(node.nextSibling);\r\n        node.parentNode.insertBefore(newNode, node.nextSibling);\r\n    },\r\n\r\n    before(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node);\r\n    },\r\n\r\n    append(parentNode, newNode) {\r\n        parentNode.appendChild(newNode);\r\n    },\r\n\r\n    wrap(node, newParent) {\r\n        //    新增父节点\r\n        /* 先将newParent插到node前面，保证newParent可以承接原node的父节点 */\r\n        /* 再将node移到newParent里面 */\r\n        // 也可以先将newParent插到node后面，因为并不改变与原node父节点的包含关系（注意，这与链表不同）\r\n        dom.before(node, newParent);\r\n        dom.append(newParent, node);\r\n    },\r\n\r\n    /* 删除节点 */\r\n    remove(deleteNode) {\r\n        deleteNode.parentNode.removeChild(deleteNode);\r\n        return deleteNode;\r\n        //    return deleteNode的目的是保留删除节点引用\r\n    },\r\n\r\n    empty(node) {\r\n        const {childNodes} = node;\r\n        //const childNodes = node.childNodes;\r\n        const arr = [];\r\n        for (let n = node.firstChild; n; n = node.firstChild) {\r\n            arr.push(dom.remove(node.firstChild));\r\n        }\r\n        return arr;\r\n    },\r\n\r\n    /* 修改节点 */\r\n    attr(node, key, value) {    //重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(key, value);\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(key);\r\n        }\r\n    },\r\n\r\n    text(node, string) {\r\n        if (arguments.length === 2) {\r\n            //适配\r\n            if ('innerText' in node) {\r\n                node.innerText = string.toString();     //ie\r\n            } else {\r\n                node.textContent = String(string);      //FireFox/Chrome\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText;        //ie\r\n            } else {\r\n                return node.textContent;      //FireFox/Chrome\r\n            }\r\n        }\r\n    },\r\n\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = String(string);\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n\r\n    style(node, key, value) {\r\n        if (arguments.length === 3) {\r\n            //    dom.style(div,'color','green');\r\n            //    修改style\r\n            node.style[key] = value;\r\n        } else if (arguments.length === 2) {\r\n            if (typeof key === 'string') {\r\n                //dom.style(div.'color');\r\n                //获取key样式的属性值\r\n                return node.style[key];\r\n            } else if (key instanceof Object) {\r\n                //    dom.style(div,{color:'red'});\r\n                //    设置style\r\n                for (let n in key) {\r\n                    node.style[n] = key[n];\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className);\r\n        },\r\n        contains(node, className) {\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn);\r\n    },\r\n\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector);\r\n    },\r\n    parent(node) {\r\n        return node.parentNode;\r\n    },\r\n    children(node) {\r\n        return node.children;\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node);\r\n    },\r\n\r\n    next(node) {\r\n        let x = node.nextSibling;\r\n        while (x && x.nodeType === 3) {\r\n            //    当x存在且x是文本，则一直移动到下一个节点，直到x是元素节点停止\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling;\r\n        while (x && x.nodeType === 3) {\r\n            //    当x存在且x是文本，则一直移动到下一个节点，直到x是元素节点停止\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call('', nodeList[i]);\r\n        }\r\n    },\r\n    index(node) {\r\n        //定义list表示node平级所有节点（包括node本身）\r\n        const list = dom.children(node.parentNode);\r\n        let index = -1;\r\n        for(let i=0;i<list.length;i++){\r\n            if(list[i] ===node){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n};\r\n"]}