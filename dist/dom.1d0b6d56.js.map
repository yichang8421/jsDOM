{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","toString","trim","content","firstChild","after","node","newNode","parentNode","insertBefore","nextSibling","before","append","appendChild","wrap","newParent","remove","deleteNode","removeChild","empty","childNodes","arr","n","push","attr","key","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","String","html","style","Object","class","add","className","classList","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","parent","children","siblings","Array","from","filter","next","x","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    /* 增加节点 */\r\n    create(string) {\r\n        // 创建任意新节点\r\n        const container = document.createElement('template');\r\n        container.innerHTML = string.toString().trim();\r\n        return container.content.firstChild;\r\n    },\r\n\r\n    after(node, newNode) {\r\n        // 在node节点之后添加节点\r\n        // 相当于在node下一个节点之前插入newNode节点\r\n        // console.log(node.nextSibling);\r\n        node.parentNode.insertBefore(newNode, node.nextSibling);\r\n    },\r\n\r\n    before(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node);\r\n    },\r\n\r\n    append(parentNode, newNode) {\r\n        parentNode.appendChild(newNode);\r\n    },\r\n\r\n    wrap(node, newParent) {\r\n        //    新增父节点\r\n        /* 先将newParent插到node前面，保证newParent可以承接原node的父节点 */\r\n        /* 再将node移到newParent里面 */\r\n        // 也可以先将newParent插到node后面，因为并不改变与原node父节点的包含关系（注意，这与链表不同）\r\n        dom.before(node, newParent);\r\n        dom.append(newParent, node);\r\n    },\r\n\r\n    /* 删除节点 */\r\n    remove(deleteNode) {\r\n        deleteNode.parentNode.removeChild(deleteNode);\r\n        return deleteNode;\r\n        //    return deleteNode的目的是保留删除节点引用\r\n    },\r\n\r\n    empty(node) {\r\n        const {childNodes} = node;\r\n        //const childNodes = node.childNodes;\r\n        const arr = [];\r\n        for (let n = node.firstChild; n; n = node.firstChild) {\r\n            arr.push(dom.remove(node.firstChild));\r\n        }\r\n        return arr;\r\n    },\r\n\r\n    /* 修改节点 */\r\n    attr(node, key, value) {    //重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(key, value);\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(key);\r\n        }\r\n    },\r\n\r\n    text(node, string) {\r\n        if (arguments.length === 2) {\r\n            //适配\r\n            if ('innerText' in node) {\r\n                node.innerText = string.toString();     //ie\r\n            } else {\r\n                node.textContent = String(string);      //FireFox/Chrome\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText;        //ie\r\n            } else {\r\n                return node.textContent;      //FireFox/Chrome\r\n            }\r\n        }\r\n    },\r\n\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = String(string);\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n\r\n    style(node, key, value) {\r\n        if (arguments.length === 3) {\r\n            //    dom.style(div,'color','green');\r\n            //    修改style\r\n            node.style[key] = value;\r\n        } else if (arguments.length === 2) {\r\n            if (typeof key === 'string') {\r\n                //dom.style(div.'color');\r\n                //获取key样式的属性值\r\n                return node.style[key];\r\n            } else if (key instanceof Object) {\r\n                //    dom.style(div,{color:'red'});\r\n                //    设置style\r\n                for (let n in key) {\r\n                    node.style[n] = key[n];\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className);\r\n        },\r\n        contains(node, className) {\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn);\r\n    },\r\n\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector);\r\n    },\r\n    parent(node) {\r\n        return node.parentNode;\r\n    },\r\n    children(node) {\r\n        return node.children;\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node);\r\n    },\r\n\r\n    next(node) {\r\n        let x = node.nextSibling;\r\n        while (x && x.nodeType === 3) {\r\n            //    当x存在且x是文本，则一直移动到下一个节点，直到x是元素节点停止\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling;\r\n        while (x && x.nodeType === 3) {\r\n            //    当x存在且x是文本，则一直移动到下一个节点，直到x是元素节点停止\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call('', nodeList[i]);\r\n        }\r\n    },\r\n    index(node) {\r\n        //定义list表示node平级所有节点（包括node本身）\r\n        const list = dom.children(node.parentNode);\r\n        let index = -1;\r\n        for(let i=0;i<list.length;i++){\r\n            if(list[i] ===node){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n};\r\n"]}